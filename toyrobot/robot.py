# AUTOGENERATED! DO NOT EDIT! File to edit: 01_robot.ipynb (unless otherwise specified).

__all__ = ['Direction', 'ToyRobot']

# Cell
class Direction:
    def __init__(self, directions=['NORTH', 'EAST', 'SOUTH', 'WEST'], idx=None):
        if idx is None:
            idx = np.random.choice(np.arange(4))
        self.directions = directions
        self.max_idx = len(directions)-1
        self.f = self.directions[idx]

    def get_curr_f(self):
        return self.directions.index(self.f)

    def LEFT(self):
        idx = self.get_curr_f()
        new_idx = idx-1 if idx>=1 else self.max_idx
        return self.__class__(idx=new_idx)

    def RIGHT(self):
        idx = self.get_curr_f()
        new_idx = idx+1 if idx<=2 else 0
        return self.__class__(idx=new_idx)

    def __repr__(self):
        return self.f

# Cell
class ToyRobot:
    def __init__(self, x, y):
        self.f = Direction()
        self.x = x
        self.y = y

    def __repr__(self):
        return f"{self.__class__.__name__}, currently at ({self.x}, {self.y}) and facing {self.f}!"

    def report(self): print(self)

    def LEFT(self):
        self.f = self.f.LEFT()
        return f"{self.__class__.__name__} facing new direction: {self.f}"

    def RIGHT(self):
        self.f = self.f.RIGHT()
        return f"{self.__class__.__name__} facing new direction: {self.f}"